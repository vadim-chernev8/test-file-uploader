{"version":3,"sources":["reducers/app.reducer.js","reducers/index.js","sagas/app-saga.js","sagas/index.js","store/index.js","serviceWorker.js","index.js","Containers/App.jsx"],"names":["initialState","appReducer","state","type","payload","saga","all","root","fork","app","history","createBrowserHistory","reducer","combineReducers","rootReducer","router","connectRouter","sagaMiddleware","createSagaMiddleware","middleware","routerMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStoreWithMiddleware","applyMiddleware","createStore","run","rootSaga","configureStore","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAEMA,EAAe,GCAN,GACbC,WDEa,eAACC,EAAD,uDAASF,EAAT,2CAAyBG,KAAzB,EAA+BC,QAA/B,OAA6CF,I,oCEHnCG,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,IADG,uC,eCEUC,GAAV,SAAUA,IAAV,iEACb,OADa,SACPD,YAAI,CACRE,YAAKC,KAFM,uC,8NCcR,IAAMC,EAAUC,cAEjBC,EAAUC,Y,yVAAgB,CAAD,GAAMC,EAAN,CAAmBC,OAAQC,YAAcN,MAElEO,EAAiBC,cAEjBC,EAAa,CACjBF,EACAG,YAAiBV,IAGbW,EAAmBC,OAAOC,sCAAwCC,IAezDC,EAbQ,WAAwB,IAAvBzB,EAAsB,uDAAP,GAC/B0B,EAA4BL,EAAiBM,IAAe,WAAf,EAAmBR,GAApCE,CAAiDO,KAE7EH,EAAQC,EAA0Bd,EAASZ,GAIjD,OAFAiB,EAAeY,IAAIC,GAEZ,CAAEL,SAIOM,GAAVN,M,YC9BYO,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OACT,kBAAC,IAAD,CAAUZ,MAAOA,GACf,kBAAC,IAAD,CAAiBf,QAASA,GACxB,mBCNe,WACjB,OACE,sCDIA,QAGJ4B,SAASC,eAAe,SD8GlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6f5069b.chunk.js","sourcesContent":["import { APP_ACTIONS } from '../actions/types';\n\nconst initialState = {\n}\n\nexport default (state = initialState, { type, payload }) => state;\n","import appReducer from './app.reducer'\n\nexport default {\n  appReducer,\n}\n","import { all } from 'redux-saga/effects'\n\nexport default function* saga() {\n  yield all([])\n}\n","import { all, fork } from 'redux-saga/effects'\n\nimport app from './app-saga'\n\nexport default function* root() {\n  yield all([\n    fork(app)\n  ])\n}\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n/*\n* Router\n*/\nimport { createBrowserHistory } from 'history'\nimport { routerMiddleware, connectRouter } from 'connected-react-router'\n/*\n*\n* Root reducer is placed here\n* Default redux store configuration\n*/\n\nimport rootReducer from '../reducers'\n\nimport rootSaga from '../sagas'\n\nexport const history = createBrowserHistory()\n\nconst reducer = combineReducers({ ...rootReducer, router: connectRouter(history) })\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middleware = [\n  sagaMiddleware,\n  routerMiddleware(history)\n]\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst configureStore = (initialState = {}) => {\n  const createStoreWithMiddleware = composeEnhancers(applyMiddleware(...middleware))(createStore)\n\n  const store = createStoreWithMiddleware(reducer, initialState)\n\n  sagaMiddleware.run(rootSaga)\n  \n  return { store }\n}\n\n\nconst { store } = configureStore()\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { ConnectedRouter } from 'connected-react-router'\n\nimport store, { history } from './store'\n\nimport { App } from './Containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './styles/index.css'\n\nReactDOM.render(\n<Provider store={store}>\n  <ConnectedRouter history={history}>\n    <App />\n  </ConnectedRouter>\n</Provider>,\ndocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { paths } from '../utils/constants'\n/*\n*\n* Containers\n*/\nimport Widget from './Widget';\n\nexport const App = () => {\n  return (\n    <div>\n      APP\n      {/* <Route exact path={paths.root} component={Widget}/> */}\n    </div>\n  )\n}\n"],"sourceRoot":""}